{"ast":null,"code":"\"use strict\";\n\nvar _Judge = _interopRequireDefault(require(\"@/model/Judge\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nmodule.exports = {\n  Query: {\n    getJudges: async () => {\n      try {\n        let judges = await _Judge.default.find().populate(\"reports\");\n        return judges;\n      } catch (error) {\n        throw new Error({\n          msg: error\n        });\n      }\n    }\n  },\n  Mutation: {\n    addJudge: async (_, args) => {\n      try {\n        const judge = await _Judge.default.create(_objectSpread({}, args));\n        return judge;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    updateJudge: async (_, args) => {\n      try {\n        const judge = await _Judge.default.findOneAndUpdate({\n          _id: args._id\n        }, args, {\n          new: true\n        });\n        return judge;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    deleteJudge: async (_, {\n      _id\n    }) => {\n      try {\n        const judge = await _Judge.default.findOne({\n          _id\n        });\n        if (!judge) throw new Error(\"No record found\");\n        judge.remove();\n        return judge._id;\n      } catch (error) {\n        throw new Error(error);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/graphql/resolvers/judgesResolvers.js"],"names":["module","exports","Query","getJudges","judges","Judge","find","populate","error","Error","msg","Mutation","addJudge","_","args","judge","create","updateJudge","findOneAndUpdate","_id","new","deleteJudge","findOne","remove"],"mappings":";;AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,YAAY;AACrB,UAAI;AACF,YAAIC,MAAM,GAAG,MAAMC,eAAMC,IAAN,GAAaC,QAAb,CAAsB,SAAtB,CAAnB;AAEA,eAAOH,MAAP;AACD,OAJD,CAIE,OAAOI,KAAP,EAAc;AACd,cAAM,IAAIC,KAAJ,CAAU;AAAEC,UAAAA,GAAG,EAAEF;AAAP,SAAV,CAAN;AACD;AACF;AATI,GADQ;AAYfG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,OAAOC,CAAP,EAAUC,IAAV,KAAmB;AAC3B,UAAI;AACF,cAAMC,KAAK,GAAG,MAAMV,eAAMW,MAAN,mBACfF,IADe,EAApB;AAIA,eAAOC,KAAP;AACD,OAND,CAME,OAAOP,KAAP,EAAc;AACd,cAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,KAXO;AAYRS,IAAAA,WAAW,EAAE,OAAOJ,CAAP,EAAUC,IAAV,KAAmB;AAC9B,UAAI;AACF,cAAMC,KAAK,GAAG,MAAMV,eAAMa,gBAAN,CAAuB;AAAEC,UAAAA,GAAG,EAAEL,IAAI,CAACK;AAAZ,SAAvB,EAA0CL,IAA1C,EAAgD;AAClEM,UAAAA,GAAG,EAAE;AAD6D,SAAhD,CAApB;AAGA,eAAOL,KAAP;AACD,OALD,CAKE,OAAOP,KAAP,EAAc;AACd,cAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,KArBO;AAsBRa,IAAAA,WAAW,EAAE,OAAOR,CAAP,EAAU;AAAEM,MAAAA;AAAF,KAAV,KAAsB;AACjC,UAAI;AACF,cAAMJ,KAAK,GAAG,MAAMV,eAAMiB,OAAN,CAAc;AAAEH,UAAAA;AAAF,SAAd,CAApB;AACA,YAAI,CAACJ,KAAL,EAAY,MAAM,IAAIN,KAAJ,CAAU,iBAAV,CAAN;AACZM,QAAAA,KAAK,CAACQ,MAAN;AACA,eAAOR,KAAK,CAACI,GAAb;AACD,OALD,CAKE,OAAOX,KAAP,EAAc;AACd,cAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF;AA/BO;AAZK,CAAjB","sourcesContent":["import Judge from \"@/model/Judge\";\n\nmodule.exports = {\n  Query: {\n    getJudges: async () => {\n      try {\n        let judges = await Judge.find().populate(\"reports\");\n\n        return judges;\n      } catch (error) {\n        throw new Error({ msg: error });\n      }\n    },\n  },\n  Mutation: {\n    addJudge: async (_, args) => {\n      try {\n        const judge = await Judge.create({\n          ...args,\n          // slug: await slugify(args.name),\n        });\n        return judge;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    updateJudge: async (_, args) => {\n      try {\n        const judge = await Judge.findOneAndUpdate({ _id: args._id }, args, {\n          new: true,\n        });\n        return judge;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    deleteJudge: async (_, { _id }) => {\n      try {\n        const judge = await Judge.findOne({ _id });\n        if (!judge) throw new Error(\"No record found\");\n        judge.remove();\n        return judge._id;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"script"}