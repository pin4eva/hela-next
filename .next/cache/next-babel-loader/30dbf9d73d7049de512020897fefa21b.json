{"ast":null,"code":"import mongoose from \"mongoose\";\nimport config from \"./config\";\nconst options = {\n  useNewUrlParser: true,\n  useFindAndModify: false,\n  useCreateIndex: true,\n  useUnifiedTopology: true\n};\nlet cachedDB = null;\nexport const connectDB = async () => {\n  if (cachedDB) return cachedDB;\n\n  try {\n    const db = await mongoose.connect(config.MONGODB_URI, options);\n    cachedDB = db;\n    console.log(`db connected: ${db.connection.host}`);\n    return db;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const disconnectdb = async () => {\n  await mongoose.disconnect().then(() => console.log(`db disconnected`));\n};","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/utils/db.js"],"names":["mongoose","config","options","useNewUrlParser","useFindAndModify","useCreateIndex","useUnifiedTopology","cachedDB","connectDB","db","connect","MONGODB_URI","console","log","connection","host","error","message","disconnectdb","disconnect","then"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE,IADH;AAEdC,EAAAA,gBAAgB,EAAE,KAFJ;AAGdC,EAAAA,cAAc,EAAE,IAHF;AAIdC,EAAAA,kBAAkB,EAAE;AAJN,CAAhB;AAMA,IAAIC,QAAQ,GAAG,IAAf;AACA,OAAO,MAAMC,SAAS,GAAG,YAAY;AACnC,MAAID,QAAJ,EAAc,OAAOA,QAAP;;AACd,MAAI;AACF,UAAME,EAAE,GAAG,MAAMT,QAAQ,CAACU,OAAT,CAAiBT,MAAM,CAACU,WAAxB,EAAqCT,OAArC,CAAjB;AACAK,IAAAA,QAAQ,GAAGE,EAAX;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBJ,EAAE,CAACK,UAAH,CAAcC,IAAK,EAAhD;AACA,WAAON,EAAP;AACD,GALD,CAKE,OAAOO,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAK,CAACC,OAAlB;AACD;AACF,CAVM;AAYP,OAAO,MAAMC,YAAY,GAAG,YAAY;AACtC,QAAMlB,QAAQ,CAACmB,UAAT,GAAsBC,IAAtB,CAA2B,MAAMR,OAAO,CAACC,GAAR,CAAa,iBAAb,CAAjC,CAAN;AACD,CAFM","sourcesContent":["import mongoose from \"mongoose\";\nimport config from \"./config\";\n\nconst options = {\n  useNewUrlParser: true,\n  useFindAndModify: false,\n  useCreateIndex: true,\n  useUnifiedTopology: true,\n};\nlet cachedDB = null;\nexport const connectDB = async () => {\n  if (cachedDB) return cachedDB;\n  try {\n    const db = await mongoose.connect(config.MONGODB_URI, options);\n    cachedDB = db;\n    console.log(`db connected: ${db.connection.host}`);\n    return db;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const disconnectdb = async () => {\n  await mongoose.disconnect().then(() => console.log(`db disconnected`));\n};\n"]},"metadata":{},"sourceType":"module"}