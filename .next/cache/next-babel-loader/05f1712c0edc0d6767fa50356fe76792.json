{"ast":null,"code":"import mongoose from \"mongoose\";\nimport slug from \"mongoose-slug-generator\";\nconst Schema = mongoose.Schema;\nconst NoteSchema = new Schema({\n  category: String,\n  topic: String,\n  questions: [{\n    type: Schema.Types.ObjectId,\n    ref: \"NoteQuestion\"\n  }],\n  slug: {\n    type: String,\n    slug: \"topic\"\n  },\n  cat_slug: {\n    type: String,\n    slug: \"category\"\n  }\n}, {\n  toJSON: {\n    virtuals: true\n  },\n  toObject: {\n    virtuals: true\n  },\n  getters: true\n}); // NoteSchema.virtual(\"contents\", {\n//   ref: \"NoteQuestion\",\n//   localField: \"questions\",\n//   foreignField: \"topic\",\n// });\n\nNoteSchema.post(\"findOne\", async function (doc) {\n  const questions = await mongoose.model(\"NoteQuestion\").find({\n    note_id: doc._id\n  });\n  doc.questions = questions;\n});\nNoteSchema.plugin(slug); // let Note;\n// try {\n//   Note = mongoose.model(\"Note\", NoteSchema);\n// } catch (error) {\n//   Note = mongoose.model(\"Note\");\n// }\n\nexport default mongoose.models.Note || mongoose.model(\"Note\", NoteSchema);","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/models/Pnote.js"],"names":["mongoose","slug","Schema","NoteSchema","category","String","topic","questions","type","Types","ObjectId","ref","cat_slug","toJSON","virtuals","toObject","getters","post","doc","model","find","note_id","_id","plugin","models","Note"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,MAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AAEA,MAAMC,UAAU,GAAG,IAAID,MAAJ,CACjB;AACEE,EAAAA,QAAQ,EAAEC,MADZ;AAEEC,EAAAA,KAAK,EAAED,MAFT;AAGEE,EAAAA,SAAS,EAAE,CAAC;AAAEC,IAAAA,IAAI,EAAEN,MAAM,CAACO,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAAD,CAHb;AAIEV,EAAAA,IAAI,EAAE;AAAEO,IAAAA,IAAI,EAAEH,MAAR;AAAgBJ,IAAAA,IAAI,EAAE;AAAtB,GAJR;AAKEW,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEH,MAAR;AAAgBJ,IAAAA,IAAI,EAAE;AAAtB;AALZ,CADiB,EAQjB;AACEY,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADV;AAEEC,EAAAA,QAAQ,EAAE;AAAED,IAAAA,QAAQ,EAAE;AAAZ,GAFZ;AAGEE,EAAAA,OAAO,EAAE;AAHX,CARiB,CAAnB,C,CAeA;AACA;AACA;AACA;AACA;;AAEAb,UAAU,CAACc,IAAX,CAAgB,SAAhB,EAA2B,gBAAgBC,GAAhB,EAAqB;AAC9C,QAAMX,SAAS,GAAG,MAAMP,QAAQ,CAC7BmB,KADqB,CACf,cADe,EAErBC,IAFqB,CAEhB;AAAEC,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAAf,GAFgB,CAAxB;AAGAJ,EAAAA,GAAG,CAACX,SAAJ,GAAgBA,SAAhB;AACD,CALD;AAOAJ,UAAU,CAACoB,MAAX,CAAkBtB,IAAlB,E,CAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAeD,QAAQ,CAACwB,MAAT,CAAgBC,IAAhB,IAAwBzB,QAAQ,CAACmB,KAAT,CAAe,MAAf,EAAuBhB,UAAvB,CAAvC","sourcesContent":["import mongoose from \"mongoose\";\nimport slug from \"mongoose-slug-generator\";\nconst Schema = mongoose.Schema;\n\nconst NoteSchema = new Schema(\n  {\n    category: String,\n    topic: String,\n    questions: [{ type: Schema.Types.ObjectId, ref: \"NoteQuestion\" }],\n    slug: { type: String, slug: \"topic\" },\n    cat_slug: { type: String, slug: \"category\" },\n  },\n  {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n    getters: true,\n  }\n);\n\n// NoteSchema.virtual(\"contents\", {\n//   ref: \"NoteQuestion\",\n//   localField: \"questions\",\n//   foreignField: \"topic\",\n// });\n\nNoteSchema.post(\"findOne\", async function (doc) {\n  const questions = await mongoose\n    .model(\"NoteQuestion\")\n    .find({ note_id: doc._id });\n  doc.questions = questions;\n});\n\nNoteSchema.plugin(slug);\n\n// let Note;\n\n// try {\n//   Note = mongoose.model(\"Note\", NoteSchema);\n// } catch (error) {\n//   Note = mongoose.model(\"Note\");\n// }\n\nexport default mongoose.models.Note || mongoose.model(\"Note\", NoteSchema);\n"]},"metadata":{},"sourceType":"module"}