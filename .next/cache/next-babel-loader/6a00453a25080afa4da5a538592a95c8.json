{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Question, Answer } from \"models/Question\";\nexport default {\n  Query: {\n    getQuestions: async () => {\n      try {\n        let questions = await Question.find().populate(\"author answers\");\n        questions = questions.map(question => {\n          const answers = Answer.find({\n            question: question._id\n          });\n          return _objectSpread(_objectSpread({}, question._doc), {}, {\n            answers\n          });\n        });\n        return questions;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    getQuestion: async (_, {\n      slug\n    }) => {\n      try {\n        let question = await Question.findOne({\n          slug\n        }).populate(\"author answers\");\n        const answers = await Answer.find({\n          question: question._id\n        }).populate(\"author\");\n        return _objectSpread(_objectSpread({}, question._doc), {}, {\n          answers\n        });\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    getQuestionsByUser: async (_, {\n      _id\n    }) => {\n      try {\n        let questions = await Question.find({\n          author: _id\n        });\n        return questions;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getAnswersByUser: async (_, {\n      _id\n    }) => {\n      try {\n        const answers = await Answer.find({\n          author: _id\n        });\n        return answers;\n      } catch (error) {\n        throw new Error(error);\n      }\n    }\n  },\n  Mutation: {\n    newQuestion: async (_, {\n      author,\n      content,\n      category,\n      title\n    }) => {\n      try {\n        const question = await Question.create({\n          author,\n          content,\n          category,\n          title\n        });\n        return question;\n      } catch (err) {\n        throw Error(err);\n      }\n    },\n    updateQuestion: async (_, {\n      _id,\n      content,\n      title\n    }) => {\n      try {\n        const question = await Question.findByIdAndUpdate(_id, {\n          content,\n          title\n        }, {\n          new: true\n        });\n        return question;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    deleteQuestion: async (_, {\n      _id\n    }) => {\n      try {\n        const question = await Question.findOne({\n          _id\n        });\n        if (question) question.remove();\n        return question;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    newAnswer: async (_, {\n      content,\n      author,\n      question\n    }) => {\n      try {\n        let answer = await Answer.create({\n          content,\n          author,\n          question\n        });\n        answer = await Answer.findOne({\n          _id: answer._id\n        }).populate(\"author\");\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    updateAnswer: async (_, {\n      content,\n      _id\n    }) => {\n      try {\n        const answer = await Answer.findOneAndUpdate({\n          _id\n        }, {\n          content\n        }, {\n          new: true\n        });\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    deleteAnswer: async (_, {\n      _id\n    }) => {\n      try {\n        const answer = await Answer.findByIdAndRemove(_id);\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    upVote: async (_, {\n      _id\n    }) => {\n      try {\n        const answer = await Answer.findOneAndUpdate({\n          _id\n        }, {\n          $inc: {\n            vote: 1\n          }\n        }, {\n          new: true\n        });\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    downVote: async (_, {\n      _id\n    }) => {\n      try {\n        const answer = await Answer.findOneAndUpdate({\n          _id\n        }, {\n          $inc: {\n            vote: -1\n          }\n        }, {\n          new: true\n        });\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/graphql/resolvers/questionResolvers.js"],"names":["Question","Answer","Query","getQuestions","questions","find","populate","map","question","answers","_id","_doc","error","Error","getQuestion","_","slug","findOne","getQuestionsByUser","author","getAnswersByUser","Mutation","newQuestion","content","category","title","create","err","updateQuestion","findByIdAndUpdate","new","deleteQuestion","remove","newAnswer","answer","updateAnswer","findOneAndUpdate","deleteAnswer","findByIdAndRemove","upVote","$inc","vote","downVote"],"mappings":"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","sourcesContent":["import { Question, Answer } from \"models/Question\";\n\nexport default {\n  Query: {\n    getQuestions: async () => {\n      try {\n        let questions = await Question.find().populate(\"author answers\");\n        questions = questions.map((question) => {\n          const answers = Answer.find({ question: question._id });\n          return {\n            ...question._doc,\n            answers,\n          };\n        });\n        return questions;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    getQuestion: async (_, { slug }) => {\n      try {\n        let question = await Question.findOne({ slug }).populate(\n          \"author answers\"\n        );\n        const answers = await Answer.find({ question: question._id }).populate(\n          \"author\"\n        );\n        return {\n          ...question._doc,\n          answers,\n        };\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    getQuestionsByUser: async (_, { _id }) => {\n      try {\n        let questions = await Question.find({ author: _id });\n        return questions;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getAnswersByUser: async (_, { _id }) => {\n      try {\n        const answers = await Answer.find({ author: _id });\n        return answers;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n  },\n  Mutation: {\n    newQuestion: async (_, { author, content, category, title }) => {\n      try {\n        const question = await Question.create({\n          author,\n          content,\n          category,\n          title,\n        });\n        return question;\n      } catch (err) {\n        throw Error(err);\n      }\n    },\n    updateQuestion: async (_, { _id, content, title }) => {\n      try {\n        const question = await Question.findByIdAndUpdate(\n          _id,\n          { content, title },\n          { new: true }\n        );\n        return question;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    deleteQuestion: async (_, { _id }) => {\n      try {\n        const question = await Question.findOne({ _id });\n        if (question) question.remove();\n        return question;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    newAnswer: async (_, { content, author, question }) => {\n      try {\n        let answer = await Answer.create({ content, author, question });\n        answer = await Answer.findOne({ _id: answer._id }).populate(\"author\");\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    updateAnswer: async (_, { content, _id }) => {\n      try {\n        const answer = await Answer.findOneAndUpdate(\n          { _id },\n          { content },\n          { new: true }\n        );\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    deleteAnswer: async (_, { _id }) => {\n      try {\n        const answer = await Answer.findByIdAndRemove(_id);\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    upVote: async (_, { _id }) => {\n      try {\n        const answer = await Answer.findOneAndUpdate(\n          { _id },\n          { $inc: { vote: 1 } },\n          { new: true }\n        );\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n    downVote: async (_, { _id }) => {\n      try {\n        const answer = await Answer.findOneAndUpdate(\n          { _id },\n          { $inc: { vote: -1 } },\n          { new: true }\n        );\n        return answer;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}