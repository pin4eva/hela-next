{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Report, RepComment } from \"models/Report\";\nimport Judge from \"models/Judge\";\nimport { authentication } from \"utils/auth\";\nexport default {\n  Query: {\n    getReports: async () => {\n      // await authentication(token);\n      try {\n        let reports = await Report.find() // .limit(5)\n        .sort({\n          createdAt: -1\n        }).populate(\"added_by\"); // .populate({\n        //   path: \"comments\",\n        //   populate: {\n        //     path: \"author\",\n        //     select: [\"_id\", \"name\"],\n        //   },\n        // })\n        // reports = reports.map((report) => {\n        //   const comments = RepComment.find({ report: report._id });\n        //   return {\n        //     ...report._doc,\n        //     comments,\n        //   };\n        // });\n\n        return reports;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getLimitedReports: async (_, {\n      skip,\n      limit\n    }) => {\n      // await authentication(token);\n      try {\n        let reports = await Report.find().skip(skip).limit(limit).sort({\n          createdAt: -1\n        }).populate(\"added_by\"); // .populate({\n        //   path: \"comments\",\n        //   populate: {\n        //     path: \"author\",\n        //     select: [\"_id\", \"name\"],\n        //   },\n        // })\n        // reports = reports.map((report) => {\n        //   const comments = RepComment.find({ report: report._id });\n        //   return {\n        //     ...report._doc,\n        //     comments,\n        //   };\n        // });\n\n        return reports;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getReport: async (_, {\n      slug\n    }) => {\n      // await auth();\n      try {\n        let report = await Report.findOne({\n          slug\n        });\n        let comment = await RepComment.find({\n          report: report._id\n        }).populate({\n          path: \"author\",\n          select: [\"_id\", \"name\"]\n        });\n        return _objectSpread(_objectSpread({}, report._doc), {}, {\n          comment\n        });\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getRepCommentsByReport: async (_, {\n      report\n    }) => {\n      try {\n        const comments = await RepComment.find({\n          report\n        }).populate(\"author\");\n        return comments;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getRepComments: async () => {\n      try {\n        const comments = await RepComment.find().populate(\"report author\");\n        return comments;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getMyReports: async (_, {\n      skip,\n      limit\n    }, {\n      token\n    }) => {\n      const user = await authentication(token);\n      let reports;\n\n      try {\n        if (user.role === \"editor\") {\n          reports = await Report.find({\n            added_by: user._id\n          }).skip(skip).limit(limit).sort({\n            createdAt: -1\n          }).populate(\"added_by\");\n        } else {\n          reports = await Report.find().skip(skip).limit(limit).sort({\n            createdAt: -1\n          }).populate(\"added_by\");\n        }\n\n        return reports;\n      } catch (error) {\n        throw Error(error);\n      }\n    }\n  },\n  Mutation: {\n    addReport: async (_, {\n      input\n    }, {\n      token\n    }) => {\n      const user = await authentication(token);\n      const {\n        year,\n        vol\n      } = input;\n      let volume = vol.split(\" \");\n      volume = Number(volume[1]);\n      let count = await Report.countDocuments();\n      count = (count + 1).toString();\n      let SN = count.padStart(4, \"1000\");\n      let caseRef = `HELA-${year}-vol-${volume}-${Number(SN)}`;\n      const reports = await Report.findOne({\n        caseRef\n      });\n\n      if (reports) {\n        caseRef = `HELA-${year}-vol-${volume}-${Number(SN) + 1}`;\n      }\n\n      try {\n        const report = await Report.create(_objectSpread(_objectSpread({}, input), {}, {\n          caseRef,\n          added_by: user._id\n        }));\n        return report;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    updateReport: async (_, {\n      input\n    }, {\n      token\n    }) => {\n      const user = await authentication(token);\n\n      try {\n        const report = await Report.findOneAndUpdate({\n          _id: input._id\n        }, _objectSpread(_objectSpread({}, input), {}, {\n          updated_by: user._id\n        }), {\n          new: true\n        });\n        return report;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    likeReport: async (_, {\n      _id\n    }) => {\n      let report = Report.findById(_id);\n      if (!report) throw Error(\"No record found\"); // console.log(object);\n\n      try {\n        report = await Report.findOneAndUpdate({\n          _id\n        }, {\n          $inc: {\n            likes: 1\n          }\n        }, {\n          new: true\n        });\n        return report.likes;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    deleteReport: async (_, {\n      _id\n    }, {\n      token\n    }) => {\n      await authentication(token);\n\n      try {\n        const report = await Report.findOne({\n          _id\n        });\n        if (!report) throw new Error(\"No record found\");\n        await Judge.findOneAndUpdate({\n          reports: report._id\n        }, {\n          $pull: {\n            reports: report._id\n          }\n        }, {\n          new: true\n        });\n        report.remove();\n        return report._id;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    // RepComment\n    addRepComment: async (_, {\n      report,\n      content\n    }, {\n      token\n    }) => {\n      const author = await authentication(token);\n\n      try {\n        let comment = await RepComment.create({\n          author,\n          report,\n          content\n        });\n        comment = await RepComment.findById(comment._id).populate(\"author\");\n        return comment;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    deleteRepComment: async (_, {\n      _id\n    }, {\n      token\n    }) => {\n      await authentication(token);\n\n      try {\n        const comment = await RepComment.findOne({\n          _id\n        });\n        if (!comment) throw new Error(\"No record found\");\n        await Report.findOneAndUpdate({\n          comments: comment._id\n        }, {\n          $pull: {\n            comments: comment._id\n          }\n        }, {\n          new: true\n        });\n        comment.remove();\n        return comment._id;\n      } catch (error) {\n        throw new Error(error);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/graphql/resolvers/reportsResolver.js"],"names":["Report","RepComment","Judge","authentication","Query","getReports","reports","find","sort","createdAt","populate","error","Error","getLimitedReports","_","skip","limit","getReport","slug","report","findOne","comment","_id","path","select","_doc","getRepCommentsByReport","comments","getRepComments","getMyReports","token","user","role","added_by","Mutation","addReport","input","year","vol","volume","split","Number","count","countDocuments","toString","SN","padStart","caseRef","create","updateReport","findOneAndUpdate","updated_by","new","likeReport","findById","$inc","likes","deleteReport","$pull","remove","addRepComment","content","author","deleteRepComment"],"mappings":"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","sourcesContent":["import { Report, RepComment } from \"models/Report\";\nimport Judge from \"models/Judge\";\nimport { authentication } from \"utils/auth\";\n\nexport default {\n  Query: {\n    getReports: async () => {\n      // await authentication(token);\n\n      try {\n        let reports = await Report.find()\n          // .limit(5)\n          .sort({ createdAt: -1 })\n          .populate(\"added_by\");\n        // .populate({\n        //   path: \"comments\",\n        //   populate: {\n        //     path: \"author\",\n        //     select: [\"_id\", \"name\"],\n        //   },\n        // })\n\n        // reports = reports.map((report) => {\n        //   const comments = RepComment.find({ report: report._id });\n        //   return {\n        //     ...report._doc,\n        //     comments,\n        //   };\n        // });\n        return reports;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getLimitedReports: async (_, { skip, limit }) => {\n      // await authentication(token);\n\n      try {\n        let reports = await Report.find()\n          .skip(skip)\n          .limit(limit)\n          .sort({ createdAt: -1 })\n          .populate(\"added_by\");\n        // .populate({\n        //   path: \"comments\",\n        //   populate: {\n        //     path: \"author\",\n        //     select: [\"_id\", \"name\"],\n        //   },\n        // })\n\n        // reports = reports.map((report) => {\n        //   const comments = RepComment.find({ report: report._id });\n        //   return {\n        //     ...report._doc,\n        //     comments,\n        //   };\n        // });\n        return reports;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getReport: async (_, { slug }) => {\n      // await auth();\n      try {\n        let report = await Report.findOne({ slug });\n        let comment = await RepComment.find({ report: report._id }).populate({\n          path: \"author\",\n          select: [\"_id\", \"name\"],\n        });\n\n        return { ...report._doc, comment };\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getRepCommentsByReport: async (_, { report }) => {\n      try {\n        const comments = await RepComment.find({ report }).populate(\"author\");\n        return comments;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getRepComments: async () => {\n      try {\n        const comments = await RepComment.find().populate(\"report author\");\n        return comments;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    getMyReports: async (_, { skip, limit }, { token }) => {\n      const user = await authentication(token);\n      let reports;\n      try {\n        if (user.role === \"editor\") {\n          reports = await Report.find({ added_by: user._id })\n            .skip(skip)\n            .limit(limit)\n            .sort({ createdAt: -1 })\n            .populate(\"added_by\");\n        } else {\n          reports = await Report.find()\n            .skip(skip)\n            .limit(limit)\n            .sort({ createdAt: -1 })\n            .populate(\"added_by\");\n        }\n        return reports;\n      } catch (error) {\n        throw Error(error);\n      }\n    },\n  },\n  Mutation: {\n    addReport: async (_, { input }, { token }) => {\n      const user = await authentication(token);\n      const { year, vol } = input;\n      let volume = vol.split(\" \");\n      volume = Number(volume[1]);\n      let count = await Report.countDocuments();\n      count = (count + 1).toString();\n      let SN = count.padStart(4, \"1000\");\n      let caseRef = `HELA-${year}-vol-${volume}-${Number(SN)}`;\n      const reports = await Report.findOne({ caseRef });\n      if (reports) {\n        caseRef = `HELA-${year}-vol-${volume}-${Number(SN) + 1}`;\n      }\n\n      try {\n        const report = await Report.create({\n          ...input,\n          caseRef,\n          added_by: user._id,\n        });\n        return report;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    updateReport: async (_, { input }, { token }) => {\n      const user = await authentication(token);\n      try {\n        const report = await Report.findOneAndUpdate(\n          { _id: input._id },\n          { ...input, updated_by: user._id },\n          {\n            new: true,\n          }\n        );\n        return report;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    likeReport: async (_, { _id }) => {\n      let report = Report.findById(_id);\n      if (!report) throw Error(\"No record found\");\n      // console.log(object);\n      try {\n        report = await Report.findOneAndUpdate(\n          { _id },\n          {\n            $inc: { likes: 1 },\n          },\n          { new: true }\n        );\n        return report.likes;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    deleteReport: async (_, { _id }, { token }) => {\n      await authentication(token);\n      try {\n        const report = await Report.findOne({ _id });\n        if (!report) throw new Error(\"No record found\");\n        await Judge.findOneAndUpdate(\n          { reports: report._id },\n          { $pull: { reports: report._id } },\n          { new: true }\n        );\n        report.remove();\n        return report._id;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    // RepComment\n    addRepComment: async (_, { report, content }, { token }) => {\n      const author = await authentication(token);\n\n      try {\n        let comment = await RepComment.create({\n          author,\n          report,\n          content,\n        });\n\n        comment = await RepComment.findById(comment._id).populate(\"author\");\n        return comment;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n    deleteRepComment: async (_, { _id }, { token }) => {\n      await authentication(token);\n      try {\n        const comment = await RepComment.findOne({ _id });\n        if (!comment) throw new Error(\"No record found\");\n        await Report.findOneAndUpdate(\n          { comments: comment._id },\n          { $pull: { comments: comment._id } },\n          { new: true }\n        );\n        comment.remove();\n        return comment._id;\n      } catch (error) {\n        throw new Error(error);\n      }\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}