{"ast":null,"code":"const {\n  GraphQLScalarType\n} = require(\"graphql\");\n\nconst {\n  Kind\n} = require(\"graphql/language\");\n\nconst dayjs = require(\"dayjs\");\n\nconst dateScalar = new GraphQLScalarType({\n  name: \"Date\",\n  description: \"Date custom scalar type\",\n\n  parseValue(value) {\n    return dayjs(value); // value from the client\n  },\n\n  serialize(value) {\n    return dayjs(value); // value sent to the client\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind === Kind.STRING) {\n      return dayjs(ast.value); // ast value is always in string format\n    }\n\n    return null;\n  }\n\n});\nmodule.exports = {\n  dateScalar\n};","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/graphql/resolvers/scalarType.js"],"names":["GraphQLScalarType","require","Kind","dayjs","dateScalar","name","description","parseValue","value","serialize","parseLiteral","ast","kind","STRING","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,SAAD,CAArC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWD,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,UAAU,GAAG,IAAIJ,iBAAJ,CAAsB;AACvCK,EAAAA,IAAI,EAAE,MADiC;AAEvCC,EAAAA,WAAW,EAAE,yBAF0B;;AAGvCC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,WAAOL,KAAK,CAACK,KAAD,CAAZ,CADgB,CACI;AACrB,GALsC;;AAMvCC,EAAAA,SAAS,CAACD,KAAD,EAAQ;AACf,WAAOL,KAAK,CAACK,KAAD,CAAZ,CADe,CACK;AACrB,GARsC;;AASvCE,EAAAA,YAAY,CAACC,GAAD,EAAM;AAChB,QAAIA,GAAG,CAACC,IAAJ,KAAaV,IAAI,CAACW,MAAtB,EAA8B;AAC5B,aAAOV,KAAK,CAACQ,GAAG,CAACH,KAAL,CAAZ,CAD4B,CACJ;AACzB;;AACD,WAAO,IAAP;AACD;;AAdsC,CAAtB,CAAnB;AAiBAM,MAAM,CAACC,OAAP,GAAiB;AAAEX,EAAAA;AAAF,CAAjB","sourcesContent":["const { GraphQLScalarType } = require(\"graphql\")\nconst { Kind } = require(\"graphql/language\")\nconst dayjs = require(\"dayjs\")\n\nconst dateScalar = new GraphQLScalarType({\n  name: \"Date\",\n  description: \"Date custom scalar type\",\n  parseValue(value) {\n    return dayjs(value) // value from the client\n  },\n  serialize(value) {\n    return dayjs(value) // value sent to the client\n  },\n  parseLiteral(ast) {\n    if (ast.kind === Kind.STRING) {\n      return dayjs(ast.value) // ast value is always in string format\n    }\n    return null\n  },\n})\n\nmodule.exports = { dateScalar }\n"]},"metadata":{},"sourceType":"script"}