{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport Cookie from \"js-cookie\";\nimport { useMemo } from \"react\";\nconst SERVER_URL = \"https://edfhr-dashboard-724077.us1.kinto.io\";\nlet apolloClient = null;\n\nif (!false) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, token) {\n  let link = createHttpLink({\n    uri: false ? `${SERVER_URL}/api/graphql` : \"/api/graphql\",\n    fetch\n  });\n  const authLink = setContext(() => {\n    return {\n      headers: {\n        Authorization: `Bearer ${token || Cookie.get(\"token\")}` || \"\"\n      }\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: false,\n    ssrMode: !false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(link),\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n}\n\nexport const initializeApollo = (initialState, options) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!false) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n};\nexport const useApollo = initialState => {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n};","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/apollo/index.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","Cookie","useMemo","SERVER_URL","apolloClient","global","create","initialState","token","link","uri","authLink","headers","Authorization","get","connectToDevTools","ssrMode","concat","cache","restore","initializeApollo","options","useApollo","store"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,MAAMC,UAAU,GAAG,6CAAnB;AAEA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,IAAI,MAAJ,EAAsB;AACpBC,EAAAA,MAAM,CAACL,KAAP,GAAeA,KAAf;AACD;;AAED,SAASM,MAAT,CAAgBC,YAAhB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIC,IAAI,GAAGX,cAAc,CAAC;AACxBY,IAAAA,GAAG,EACD,QACK,GAAEP,UAAW,cADlB,GAEI,cAJkB;AAMxBH,IAAAA;AANwB,GAAD,CAAzB;AASA,QAAMW,QAAQ,GAAGZ,UAAU,CAAC,MAAM;AAChC,WAAO;AACLa,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASL,KAAK,IAAIP,MAAM,CAACa,GAAP,CAAW,OAAX,CAAoB,EAAvC,IAA4C;AADpD;AADJ,KAAP;AAKD,GAN0B,CAA3B;AAQA,SAAO,IAAIlB,YAAJ,CAAiB;AACtBmB,IAAAA,iBAAiB,OADK;AAEtBC,IAAAA,OAAO,EAAE,MAFa;AAEK;AAC3BP,IAAAA,IAAI,EAAEE,QAAQ,CAACM,MAAT,CAAgBR,IAAhB,CAHgB;AAItBS,IAAAA,KAAK,EAAE,IAAIrB,aAAJ,GAAoBsB,OAApB,CAA4BZ,YAAY,IAAI,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAED,OAAO,MAAMa,gBAAgB,GAAG,CAACb,YAAD,EAAec,OAAf,KAA2B;AACzD;AACA;AACA,MAAI,MAAJ,EAAsB;AACpB,WAAOf,MAAM,CAACC,YAAD,EAAec,OAAf,CAAb;AACD,GALwD,CAOzD;;;AACA,MAAI,CAACjB,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGE,MAAM,CAACC,YAAD,EAAec,OAAf,CAArB;AACD;;AAED,SAAOjB,YAAP;AACD,CAbM;AAeP,OAAO,MAAMkB,SAAS,GAAIf,YAAD,IAAkB;AACzC,QAAMgB,KAAK,GAAGrB,OAAO,CAAC,MAAMkB,gBAAgB,CAACb,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOgB,KAAP;AACD,CAHM","sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\n\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport Cookie from \"js-cookie\";\nimport { useMemo } from \"react\";\n\nconst SERVER_URL = \"https://edfhr-dashboard-724077.us1.kinto.io\";\n\nlet apolloClient = null;\n\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, token) {\n  let link = createHttpLink({\n    uri:\n      process.env.NODE_ENV !== \"development\"\n        ? `${SERVER_URL}/api/graphql`\n        : \"/api/graphql\",\n\n    fetch,\n  });\n\n  const authLink = setContext(() => {\n    return {\n      headers: {\n        Authorization: `Bearer ${token || Cookie.get(\"token\")}` || \"\",\n      },\n    };\n  });\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(link),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\nexport const initializeApollo = (initialState, options) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState, options);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n};\n\nexport const useApollo = (initialState) => {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}