{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSetRecoilState } from \"recoil\";\nimport { ModalAtom } from \"atoms/ModalAtom\";\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n\nexport var useAwayListener = function useAwayListener(ref, action) {\n  _s();\n\n  // const setModalActive = useSetRecoilState(ModalAtom);\n  useEffect(function () {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        // alert(\"You clicked outside of me!\");\n        // setModalActive(false);\n        action();\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return function () {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n};\n/**\n * Component that alerts if you click outside of it\n */\n\n_s(useAwayListener, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/home/peter/Desktop/projects/hela/law-3/src/components/AwayListner.js"],"names":["React","useRef","useEffect","PropTypes","useSetRecoilState","ModalAtom","useAwayListener","ref","action","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,iBAAT,QAAkC,QAAlC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,MAAN,EAAiB;AAAA;;AAC9C;AACAN,EAAAA,SAAS,CAAC,YAAM;AACd;AACJ;AACA;AACI,aAASO,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,UAAIH,GAAG,CAACI,OAAJ,IAAe,CAACJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtD;AACA;AACAL,QAAAA,MAAM;AACP;AACF,KAVa,CAWd;;;AACAM,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,kBAAvC;AACA,WAAO,YAAM;AACX;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,kBAA1C;AACD,KAHD;AAID,GAjBQ,EAiBN,CAACF,GAAD,CAjBM,CAAT;AAkBD,CApBM;AAsBP;AACA;AACA;;GAxBaD,e","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSetRecoilState } from \"recoil\";\nimport { ModalAtom } from \"atoms/ModalAtom\";\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nexport const useAwayListener = (ref, action) => {\n  // const setModalActive = useSetRecoilState(ModalAtom);\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        // alert(\"You clicked outside of me!\");\n        // setModalActive(false);\n        action();\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n};\n\n/**\n * Component that alerts if you click outside of it\n */\n"]},"metadata":{},"sourceType":"module"}